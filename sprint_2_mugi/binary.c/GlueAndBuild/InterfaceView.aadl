---------------------------------------------------
-- AADL2.0
-- TASTE
-- 
-- 
---------------------------------------------------

PACKAGE interfaceview::FV::OBSW
PUBLIC

WITH Taste;
WITH DataView;
WITH TASTE_IV_Properties;
SUBPROGRAM PI_Takeoff
FEATURES
  Trajectory : IN PARAMETER DataView::MyTrajectory {
    Taste::encoding => UPER;
  };
PROPERTIES
  Taste::Associated_Queue_Size => 1;
END PI_Takeoff;

SUBPROGRAM IMPLEMENTATION PI_Takeoff.others
END PI_Takeoff.others;

SUBPROGRAM PI_Pulse
PROPERTIES
  Taste::Associated_Queue_Size => 1;
END PI_Pulse;

SUBPROGRAM IMPLEMENTATION PI_Pulse.others
END PI_Pulse.others;

SUBPROGRAM RI_Compute_PWM
FEATURES
  Trajectory : IN PARAMETER DataView::MyTrajectory {
    Taste::encoding => NATIVE;
  };
  States : IN PARAMETER DataView::MyStates {
    Taste::encoding => NATIVE;
  };
  PWM : OUT PARAMETER DataView::MyPWM {
    Taste::encoding => NATIVE;
  };
END RI_Compute_PWM;

SUBPROGRAM IMPLEMENTATION RI_Compute_PWM.others
END RI_Compute_PWM.others;

SUBPROGRAM RI_Respond_state
FEATURES
  PWM : IN PARAMETER DataView::MyPWM {
    Taste::encoding => NATIVE;
  };
  States : OUT PARAMETER DataView::MyStates {
    Taste::encoding => NATIVE;
  };
END RI_Respond_state;

SUBPROGRAM IMPLEMENTATION RI_Respond_state.others
END RI_Respond_state.others;

SUBPROGRAM RI_GetHeight
FEATURES
  Height : IN PARAMETER DataView::MyReal {
    Taste::encoding => NATIVE;
  };
END RI_GetHeight;

SUBPROGRAM IMPLEMENTATION RI_GetHeight.others
END RI_GetHeight.others;

END interfaceview::FV::OBSW;

PACKAGE interfaceview::FV::Controller
PUBLIC

WITH Taste;
WITH DataView;
WITH TASTE_IV_Properties;
SUBPROGRAM PI_Compute_PWM
FEATURES
  Trajectory : IN PARAMETER DataView::MyTrajectory {
    Taste::encoding => NATIVE;
  };
  States : IN PARAMETER DataView::MyStates {
    Taste::encoding => NATIVE;
  };
  PWM : OUT PARAMETER DataView::MyPWM {
    Taste::encoding => NATIVE;
  };
PROPERTIES
  Taste::Associated_Queue_Size => 1;
END PI_Compute_PWM;

SUBPROGRAM IMPLEMENTATION PI_Compute_PWM.others
END PI_Compute_PWM.others;

END interfaceview::FV::Controller;

PACKAGE interfaceview::FV::Ground
PUBLIC

WITH Taste;
WITH DataView;
WITH TASTE_IV_Properties;
SUBPROGRAM PI_GetHeight
FEATURES
  Height : IN PARAMETER DataView::MyReal {
    Taste::encoding => NATIVE;
  };
PROPERTIES
  Taste::Associated_Queue_Size => 1;
END PI_GetHeight;

SUBPROGRAM IMPLEMENTATION PI_GetHeight.others
END PI_GetHeight.others;

SUBPROGRAM RI_Takeoff
FEATURES
  Trajectory : IN PARAMETER DataView::MyTrajectory {
    Taste::encoding => UPER;
  };
END RI_Takeoff;

SUBPROGRAM IMPLEMENTATION RI_Takeoff.others
END RI_Takeoff.others;

END interfaceview::FV::Ground;

PACKAGE interfaceview::FV::Drone_model
PUBLIC

WITH Taste;
WITH DataView;
WITH TASTE_IV_Properties;
SUBPROGRAM PI_Respond_state
FEATURES
  PWM : IN PARAMETER DataView::MyPWM {
    Taste::encoding => NATIVE;
  };
  States : OUT PARAMETER DataView::MyStates {
    Taste::encoding => NATIVE;
  };
PROPERTIES
  Taste::Associated_Queue_Size => 1;
END PI_Respond_state;

SUBPROGRAM IMPLEMENTATION PI_Respond_state.others
END PI_Respond_state.others;

END interfaceview::FV::Drone_model;

PACKAGE interfaceview::IV
PUBLIC

WITH interfaceview::FV::OBSW;
WITH interfaceview::FV::Controller;
WITH interfaceview::FV::Drone_model;
WITH interfaceview::FV::Ground;
WITH interfaceview::FV;
WITH Taste;
WITH DataView;
WITH TASTE_IV_Properties;
SYSTEM OBSW
FEATURES
  PI_Takeoff : PROVIDES SUBPROGRAM ACCESS interfaceview::FV::OBSW::PI_Takeoff.others {
    Taste::coordinates => "446 1052";
    Taste::RCMoperationKind => sporadic;
    Taste::RCMperiod => 0 ms;
    Taste::Deadline => 0 ms;
    Taste::InterfaceName => "Takeoff";
  };
  PI_Pulse : PROVIDES SUBPROGRAM ACCESS interfaceview::FV::OBSW::PI_Pulse.others {
    Taste::coordinates => "185 426";
    Taste::RCMoperationKind => cyclic;
    Taste::RCMperiod => 0 ms;
    Taste::Deadline => 0 ms;
    Taste::InterfaceName => "Pulse";
  };
  RI_Compute_PWM : REQUIRES SUBPROGRAM ACCESS interfaceview::FV::Controller::PI_Compute_PWM.others {
    Taste::coordinates => "1128 492";
    Taste::RCMoperationKind => any;
    Taste::InterfaceName => "Compute_PWM";
    Taste::labelInheritance => "true";
  };
  RI_Respond_state : REQUIRES SUBPROGRAM ACCESS interfaceview::FV::Drone_model::PI_Respond_state.others {
    Taste::coordinates => "1128 753";
    Taste::RCMoperationKind => any;
    Taste::InterfaceName => "Respond_state";
    Taste::labelInheritance => "true";
  };
  RI_GetHeight : REQUIRES SUBPROGRAM ACCESS interfaceview::FV::Ground::PI_GetHeight.others {
    Taste::coordinates => "779 1052";
    Taste::RCMoperationKind => any;
    Taste::InterfaceName => "GetHeight";
    Taste::labelInheritance => "true";
  };
PROPERTIES
  Source_Language => (SDL);
END OBSW;

SYSTEM IMPLEMENTATION OBSW.others
SUBCOMPONENTS
  Takeoff_impl : SUBPROGRAM interfaceview::FV::OBSW::PI_Takeoff.others {
    Compute_Execution_Time => 0 ms .. 0 ms;
  };
  Pulse_impl : SUBPROGRAM interfaceview::FV::OBSW::PI_Pulse.others {
    Compute_Execution_Time => 0 ms .. 0 ms;
  };
CONNECTIONS
  OpToPICnx_Takeoff_impl : SUBPROGRAM ACCESS Takeoff_impl -> PI_Takeoff;
  OpToPICnx_Pulse_impl : SUBPROGRAM ACCESS Pulse_impl -> PI_Pulse;
END OBSW.others;

SYSTEM Controller
FEATURES
  PI_Compute_PWM : PROVIDES SUBPROGRAM ACCESS interfaceview::FV::Controller::PI_Compute_PWM.others {
    Taste::coordinates => "1724 492";
    Taste::RCMoperationKind => unprotected;
    Taste::RCMperiod => 0 ms;
    Taste::Deadline => 0 ms;
    Taste::InterfaceName => "Compute_PWM";
  };
PROPERTIES
  Source_Language => (Simulink);
END Controller;

SYSTEM IMPLEMENTATION Controller.others
SUBCOMPONENTS
  Compute_PWM_impl : SUBPROGRAM interfaceview::FV::Controller::PI_Compute_PWM.others {
    Compute_Execution_Time => 0 ms .. 0 ms;
  };
CONNECTIONS
  OpToPICnx_Compute_PWM_impl : SUBPROGRAM ACCESS Compute_PWM_impl -> PI_Compute_PWM;
END Controller.others;

SYSTEM Ground
FEATURES
  PI_GetHeight : PROVIDES SUBPROGRAM ACCESS interfaceview::FV::Ground::PI_GetHeight.others {
    Taste::coordinates => "780 1549";
    Taste::RCMoperationKind => sporadic;
    Taste::RCMperiod => 0 ms;
    Taste::Deadline => 0 ms;
    Taste::InterfaceName => "GetHeight";
  };
  RI_Takeoff : REQUIRES SUBPROGRAM ACCESS interfaceview::FV::OBSW::PI_Takeoff.others {
    Taste::coordinates => "451 1549";
    Taste::RCMoperationKind => any;
    Taste::InterfaceName => "Takeoff";
    Taste::labelInheritance => "true";
  };
PROPERTIES
  Source_Language => (GUI);
END Ground;

SYSTEM IMPLEMENTATION Ground.others
SUBCOMPONENTS
  GetHeight_impl : SUBPROGRAM interfaceview::FV::Ground::PI_GetHeight.others {
    Compute_Execution_Time => 0 ms .. 0 ms;
  };
CONNECTIONS
  OpToPICnx_GetHeight_impl : SUBPROGRAM ACCESS GetHeight_impl -> PI_GetHeight;
END Ground.others;

SYSTEM Drone_model
FEATURES
  PI_Respond_state : PROVIDES SUBPROGRAM ACCESS interfaceview::FV::Drone_model::PI_Respond_state.others {
    Taste::coordinates => "1760 1513";
    Taste::RCMoperationKind => unprotected;
    Taste::RCMperiod => 0 ms;
    Taste::Deadline => 0 ms;
    Taste::InterfaceName => "Respond_state";
  };
PROPERTIES
  Source_Language => (Simulink);
END Drone_model;

SYSTEM IMPLEMENTATION Drone_model.others
SUBCOMPONENTS
  Respond_state_impl : SUBPROGRAM interfaceview::FV::Drone_model::PI_Respond_state.others {
    Compute_Execution_Time => 0 ms .. 0 ms;
  };
CONNECTIONS
  OpToPICnx_Respond_state_impl : SUBPROGRAM ACCESS Respond_state_impl -> PI_Respond_state;
END Drone_model.others;

SYSTEM interfaceview
END interfaceview;

SYSTEM IMPLEMENTATION interfaceview.others
SUBCOMPONENTS
  OBSW : SYSTEM interfaceview::IV::OBSW.others {
    Taste::coordinates => "185 312 1128 1052";
  };
  Controller : SYSTEM interfaceview::IV::Controller.others {
    Taste::coordinates => "1724 374 2375 877";
  };
  Ground : SYSTEM interfaceview::IV::Ground.others {
    Taste::coordinates => "128 1549 1005 2001";
  };
  Drone_model : SYSTEM interfaceview::IV::Drone_model.others {
    Taste::coordinates => "1760 1421 2349 1918";
  };
CONNECTIONS
  OBSW_Takeoff_Ground_Takeoff : SUBPROGRAM ACCESS OBSW.PI_Takeoff -> Ground.RI_Takeoff {
    Taste::coordinates => "451 1549 451 1105 446 1105 446 1052";
  };
  Controller_Compute_PWM_OBSW_Compute_PWM : SUBPROGRAM ACCESS Controller.PI_Compute_PWM -> OBSW.RI_Compute_PWM {
    Taste::coordinates => "1128 492 1425 492 1425 492 1723 492";
  };
  Drone_model_Respond_state_OBSW_Respond_state : SUBPROGRAM ACCESS Drone_model.PI_Respond_state -> OBSW.RI_Respond_state {
    Taste::coordinates => "1128 753 1449 753 1449 1513 1760 1513";
  };
  Ground_GetHeight_OBSW_GetHeight : SUBPROGRAM ACCESS Ground.PI_GetHeight -> OBSW.RI_GetHeight {
    Taste::coordinates => "779 1052 779 1169 780 1169 780 1549";
  };
END interfaceview.others;

PROPERTIES
  Taste::dataView => ("DataView");
  Taste::dataViewPath => ("DataView.aadl");
  Taste::coordinates => "0 0 2970 2100";
  Taste::version => "1.3.19";
END interfaceview::IV;

PACKAGE interfaceview::FV
PUBLIC

WITH Taste;
WITH DataView;
WITH TASTE_IV_Properties;
END interfaceview::FV;

