-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY TASTE_BasicTypes IS


SUBTYPE T_Boolean_pattern_array_range is Natural range 1..1;
SUBTYPE T_Boolean_pattern_array is adaasn1rtl.BitArray(T_Boolean_pattern_array_range);
T_Boolean_pattern:CONSTANT T_Boolean_pattern_array := T_Boolean_pattern_array'(1=>1);

FUNCTION asn1SccT_Int32_Init return asn1SccT_Int32
IS 
BEGIN
    RETURN -2147483648;
END asn1SccT_Int32_Init;

FUNCTION asn1SccT_Int32_IsConstraintValid(val : in asn1SccT_Int32) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
 
 
BEGIN
-- INTEGER  (-2147483648 .. 2147483647)-------
-- INTEGER  (-2147483648 .. 2147483647)


    ret := adaasn1rtl.ASN1_RESULT'(Success => (-2147483648 <= val AND val <= 2147483647), ErrorCode => ERR_asn1SccT_Int32);
    RETURN ret;
END asn1SccT_Int32_IsConstraintValid;

function asn1SccT_Int32_Equal(val1, val2: in asn1SccT_Int32) return Boolean
is
begin
    return val1 = val2;
end asn1SccT_Int32_Equal;

FUNCTION asn1SccT_UInt32_Init return asn1SccT_UInt32
IS 
BEGIN
    RETURN 0;
END asn1SccT_UInt32_Init;

FUNCTION asn1SccT_UInt32_IsConstraintValid(val : in asn1SccT_UInt32) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
 
 
BEGIN
-- INTEGER  (0 .. 4294967295)-------
-- INTEGER  (0 .. 4294967295)


    ret := adaasn1rtl.ASN1_RESULT'(Success => (0 <= val AND val <= 4294967295), ErrorCode => ERR_asn1SccT_UInt32);
    RETURN ret;
END asn1SccT_UInt32_IsConstraintValid;

function asn1SccT_UInt32_Equal(val1, val2: in asn1SccT_UInt32) return Boolean
is
begin
    return val1 = val2;
end asn1SccT_UInt32_Equal;

FUNCTION asn1SccT_Int8_Init return asn1SccT_Int8
IS 
BEGIN
    RETURN -128;
END asn1SccT_Int8_Init;

FUNCTION asn1SccT_Int8_IsConstraintValid(val : in asn1SccT_Int8) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
 
 
BEGIN
-- INTEGER  (-128 .. 127)-------
-- INTEGER  (-128 .. 127)


    ret := adaasn1rtl.ASN1_RESULT'(Success => (-128 <= val AND val <= 127), ErrorCode => ERR_asn1SccT_Int8);
    RETURN ret;
END asn1SccT_Int8_IsConstraintValid;

function asn1SccT_Int8_Equal(val1, val2: in asn1SccT_Int8) return Boolean
is
begin
    return val1 = val2;
end asn1SccT_Int8_Equal;

FUNCTION asn1SccT_UInt8_Init return asn1SccT_UInt8
IS 
BEGIN
    RETURN 0;
END asn1SccT_UInt8_Init;

FUNCTION asn1SccT_UInt8_IsConstraintValid(val : in asn1SccT_UInt8) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
 
 
BEGIN
-- INTEGER  (0 .. 255)-------
-- INTEGER  (0 .. 255)


    ret := adaasn1rtl.ASN1_RESULT'(Success => (0 <= val AND val <= 255), ErrorCode => ERR_asn1SccT_UInt8);
    RETURN ret;
END asn1SccT_UInt8_IsConstraintValid;

function asn1SccT_UInt8_Equal(val1, val2: in asn1SccT_UInt8) return Boolean
is
begin
    return val1 = val2;
end asn1SccT_UInt8_Equal;

FUNCTION asn1SccT_Boolean_Init return asn1SccT_Boolean
IS 
BEGIN
    RETURN FALSE;
END asn1SccT_Boolean_Init;

function asn1SccT_Boolean_Equal(val1, val2: in asn1SccT_Boolean) return Boolean
is
begin
    return val1 = val2;
end asn1SccT_Boolean_Equal;

 

END TASTE_BasicTypes;