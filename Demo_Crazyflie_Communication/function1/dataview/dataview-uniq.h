#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef double asn1SccMyReal;

#define asn1SccMyReal_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccMyReal_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccMyReal_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccMyReal_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccMyReal_REQUIRED_BYTES_FOR_XER_ENCODING   67

void asn1SccMyReal_Initialize(asn1SccMyReal* pVal);
flag asn1SccMyReal_IsConstraintValid(const asn1SccMyReal* val, int* pErrCode);
#ifndef ERR_asn1SccMyReal 
#define ERR_asn1SccMyReal		1001  /*(0.00000000000000000000E+000 .. 1.00000000000000000000E+003)*/
#endif

typedef flag asn1SccMyBool;

#define asn1SccMyBool_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyBool_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccMyBool_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyBool_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccMyBool_REQUIRED_BYTES_FOR_XER_ENCODING   30

void asn1SccMyBool_Initialize(asn1SccMyBool* pVal);
flag asn1SccMyBool_IsConstraintValid(const asn1SccMyBool* val, int* pErrCode);


typedef enum {
    asn1Scchello = 0,
    asn1Sccworld = 1,
    asn1Scchowareyou = 2
} asn1SccMyEnum;

#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_XER_ENCODING   30

void asn1SccMyEnum_Initialize(asn1SccMyEnum* pVal);
flag asn1SccMyEnum_IsConstraintValid(const asn1SccMyEnum* val, int* pErrCode);
#ifndef ERR_asn1SccMyEnum_unknown_enumeration_value 
#define ERR_asn1SccMyEnum_unknown_enumeration_value		1003  /**/
#endif
#ifndef ERR_asn1SccMyEnum 
#define ERR_asn1SccMyEnum		1002  /**/
#endif

typedef struct {    
    asn1SccMyEnum arr[2];
} asn1SccMySeqOf;

#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeqOf_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMySeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   55

void asn1SccMySeqOf_Initialize(asn1SccMySeqOf* pVal);
flag asn1SccMySeqOf_IsConstraintValid(const asn1SccMySeqOf* val, int* pErrCode);
#ifndef ERR_asn1SccMySeqOf 
#define ERR_asn1SccMySeqOf		1004  /*(SIZE(2))*/
#endif

typedef struct {    
    byte arr[3];
} asn1SccMyOctStr;

#define asn1SccMyOctStr_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccMyOctStr_REQUIRED_BITS_FOR_ENCODING        24
#define asn1SccMyOctStr_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccMyOctStr_REQUIRED_BITS_FOR_ACN_ENCODING    24
#define asn1SccMyOctStr_REQUIRED_BYTES_FOR_XER_ENCODING   27

void asn1SccMyOctStr_Initialize(asn1SccMyOctStr* pVal);
flag asn1SccMyOctStr_IsConstraintValid(const asn1SccMyOctStr* val, int* pErrCode);
#ifndef ERR_asn1SccMyOctStr 
#define ERR_asn1SccMyOctStr		1005  /*(SIZE(3))*/
#endif

typedef double asn1SccANGLE;

#define asn1SccANGLE_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccANGLE_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccANGLE_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccANGLE_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccANGLE_REQUIRED_BYTES_FOR_XER_ENCODING   65

void asn1SccANGLE_Initialize(asn1SccANGLE* pVal);
flag asn1SccANGLE_IsConstraintValid(const asn1SccANGLE* val, int* pErrCode);
#ifndef ERR_asn1SccANGLE 
#define ERR_asn1SccANGLE		1006  /*(-3.60000000000000000000E+002 .. 3.60000000000000000000E+002)*/
#endif

typedef double asn1SccRATE;

#define asn1SccRATE_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccRATE_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccRATE_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccRATE_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccRATE_REQUIRED_BYTES_FOR_XER_ENCODING   63

void asn1SccRATE_Initialize(asn1SccRATE* pVal);
flag asn1SccRATE_IsConstraintValid(const asn1SccRATE* val, int* pErrCode);
#ifndef ERR_asn1SccRATE 
#define ERR_asn1SccRATE		1007  /*(-1.00000000000000000000E+005 .. 1.00000000000000000000E+005)*/
#endif

typedef asn1SccUint asn1SccT_UInt16;

#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt16 
#define ERR_asn1SccT_UInt16		1008  /*(0 .. 65535)*/
#endif

typedef struct {
    asn1SccANGLE roll;
    asn1SccANGLE pitch;
    asn1SccRATE yaw;
    asn1SccT_UInt16 thrust;
} asn1SccTC_T;

#define asn1SccTC_T_REQUIRED_BYTES_FOR_ENCODING       41 
#define asn1SccTC_T_REQUIRED_BITS_FOR_ENCODING        328
#define asn1SccTC_T_REQUIRED_BYTES_FOR_ACN_ENCODING   41 
#define asn1SccTC_T_REQUIRED_BITS_FOR_ACN_ENCODING    328
#define asn1SccTC_T_REQUIRED_BYTES_FOR_XER_ENCODING   239

void asn1SccTC_T_Initialize(asn1SccTC_T* pVal);
flag asn1SccTC_T_IsConstraintValid(const asn1SccTC_T* val, int* pErrCode);


typedef double asn1SccGYROSCOPE;

#define asn1SccGYROSCOPE_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccGYROSCOPE_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccGYROSCOPE_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccGYROSCOPE_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccGYROSCOPE_REQUIRED_BYTES_FOR_XER_ENCODING   73

void asn1SccGYROSCOPE_Initialize(asn1SccGYROSCOPE* pVal);
flag asn1SccGYROSCOPE_IsConstraintValid(const asn1SccGYROSCOPE* val, int* pErrCode);
#ifndef ERR_asn1SccGYROSCOPE 
#define ERR_asn1SccGYROSCOPE		1009  /*(-1.00000000000000000000E+005 .. 1.00000000000000000000E+005)*/
#endif

typedef struct {
    asn1SccGYROSCOPE x;
    asn1SccGYROSCOPE y;
    asn1SccGYROSCOPE z;
} asn1SccGYRO_SEQ;

#define asn1SccGYRO_SEQ_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGYRO_SEQ_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccGYRO_SEQ_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccGYRO_SEQ_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccGYRO_SEQ_REQUIRED_BYTES_FOR_XER_ENCODING   192

void asn1SccGYRO_SEQ_Initialize(asn1SccGYRO_SEQ* pVal);
flag asn1SccGYRO_SEQ_IsConstraintValid(const asn1SccGYRO_SEQ* val, int* pErrCode);


typedef double asn1SccACCELERATION;

#define asn1SccACCELERATION_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccACCELERATION_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccACCELERATION_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccACCELERATION_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccACCELERATION_REQUIRED_BYTES_FOR_XER_ENCODING   79

void asn1SccACCELERATION_Initialize(asn1SccACCELERATION* pVal);
flag asn1SccACCELERATION_IsConstraintValid(const asn1SccACCELERATION* val, int* pErrCode);
#ifndef ERR_asn1SccACCELERATION 
#define ERR_asn1SccACCELERATION		1010  /*(-1.60000000000000000000E+001 .. 1.60000000000000000000E+001)*/
#endif

typedef struct {
    asn1SccACCELERATION x;
    asn1SccACCELERATION y;
    asn1SccACCELERATION z;
} asn1SccACC_SEQ;

#define asn1SccACC_SEQ_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccACC_SEQ_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccACC_SEQ_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccACC_SEQ_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccACC_SEQ_REQUIRED_BYTES_FOR_XER_ENCODING   190

void asn1SccACC_SEQ_Initialize(asn1SccACC_SEQ* pVal);
flag asn1SccACC_SEQ_IsConstraintValid(const asn1SccACC_SEQ* val, int* pErrCode);


typedef asn1SccUint asn1SccHEIGHT;

#define asn1SccHEIGHT_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccHEIGHT_REQUIRED_BITS_FOR_ENCODING        13
#define asn1SccHEIGHT_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccHEIGHT_REQUIRED_BITS_FOR_ACN_ENCODING    13
#define asn1SccHEIGHT_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccHEIGHT_Initialize(asn1SccHEIGHT* pVal);
flag asn1SccHEIGHT_IsConstraintValid(const asn1SccHEIGHT* val, int* pErrCode);
#ifndef ERR_asn1SccHEIGHT 
#define ERR_asn1SccHEIGHT		1011  /*(0 .. 8191)*/
#endif

typedef struct {
    asn1SccGYRO_SEQ gyro;
    asn1SccACC_SEQ acc;
    asn1SccHEIGHT z;
} asn1SccTM_T;

#define asn1SccTM_T_REQUIRED_BYTES_FOR_ENCODING       80 
#define asn1SccTM_T_REQUIRED_BITS_FOR_ENCODING        637
#define asn1SccTM_T_REQUIRED_BYTES_FOR_ACN_ENCODING   80 
#define asn1SccTM_T_REQUIRED_BITS_FOR_ACN_ENCODING    637
#define asn1SccTM_T_REQUIRED_BYTES_FOR_XER_ENCODING   406

void asn1SccTM_T_Initialize(asn1SccTM_T* pVal);
flag asn1SccTM_T_IsConstraintValid(const asn1SccTM_T* val, int* pErrCode);


typedef enum {
    asn1Sccvalid = 0,
    asn1Sccinvalid = 1
} asn1SccMySeq_validity;

#define asn1SccMySeq_validity_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeq_validity_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccMySeq_validity_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMySeq_validity_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccMySeq_validity_REQUIRED_BYTES_FOR_XER_ENCODING   46

void asn1SccMySeq_validity_Initialize(asn1SccMySeq_validity* pVal);
flag asn1SccMySeq_validity_IsConstraintValid(const asn1SccMySeq_validity* val, int* pErrCode);
#ifndef ERR_asn1SccMySeq_validity_unknown_enumeration_value 
#define ERR_asn1SccMySeq_validity_unknown_enumeration_value		1013  /**/
#endif
#ifndef ERR_asn1SccMySeq_validity 
#define ERR_asn1SccMySeq_validity		1012  /**/
#endif

typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1014  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1015  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1016  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1017  /*(0 .. 255)*/
#endif

typedef asn1SccT_UInt8 asn1SccMyInteger;

#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* val, int* pErrCode);


typedef struct {
    asn1SccMyInteger input_data;
    asn1SccMyInteger output_data;
    asn1SccMySeq_validity validity;
} asn1SccMySeq;

#define asn1SccMySeq_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccMySeq_REQUIRED_BITS_FOR_ENCODING        17
#define asn1SccMySeq_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccMySeq_REQUIRED_BITS_FOR_ACN_ENCODING    17
#define asn1SccMySeq_REQUIRED_BYTES_FOR_XER_ENCODING   141

void asn1SccMySeq_Initialize(asn1SccMySeq* pVal);
flag asn1SccMySeq_IsConstraintValid(const asn1SccMySeq* val, int* pErrCode);


typedef struct {
    enum {
        MyChoice_NONE,
        a_PRESENT,
        b_PRESENT 
    } kind;
    union {
        flag a;
        asn1SccMySeq b;
    } u; 
} asn1SccMyChoice;

#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ENCODING        19
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ACN_ENCODING    19
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_XER_ENCODING   154

void asn1SccMyChoice_Initialize(asn1SccMyChoice* pVal);
flag asn1SccMyChoice_IsConstraintValid(const asn1SccMyChoice* val, int* pErrCode);
#ifndef ERR_asn1SccMyChoice_unknown_choice_index 
#define ERR_asn1SccMyChoice_unknown_choice_index		1018  /**/
#endif

typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


extern const asn1SccMySeqOf myVar;
extern const asn1SccTM_T sampleMeasurement;
extern const asn1SccTC_T sampleCommand; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccMyReal_Encode(const asn1SccMyReal* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyReal_Decode(asn1SccMyReal* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMyBool_Encode(const asn1SccMyBool* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyBool_Decode(asn1SccMyBool* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMyEnum_Encode(const asn1SccMyEnum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyEnum_Decode(asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMySeqOf_Encode(const asn1SccMySeqOf* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeqOf_Decode(asn1SccMySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMyOctStr_Encode(const asn1SccMyOctStr* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyOctStr_Decode(asn1SccMyOctStr* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccANGLE_Encode(const asn1SccANGLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccANGLE_Decode(asn1SccANGLE* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccRATE_Encode(const asn1SccRATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccRATE_Decode(asn1SccRATE* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTC_T_Encode(const asn1SccTC_T* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTC_T_Decode(asn1SccTC_T* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccGYROSCOPE_Encode(const asn1SccGYROSCOPE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccGYROSCOPE_Decode(asn1SccGYROSCOPE* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccGYRO_SEQ_Encode(const asn1SccGYRO_SEQ* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccGYRO_SEQ_Decode(asn1SccGYRO_SEQ* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccACCELERATION_Encode(const asn1SccACCELERATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccACCELERATION_Decode(asn1SccACCELERATION* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccACC_SEQ_Encode(const asn1SccACC_SEQ* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccACC_SEQ_Decode(asn1SccACC_SEQ* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccHEIGHT_Encode(const asn1SccHEIGHT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccHEIGHT_Decode(asn1SccHEIGHT* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTM_T_Encode(const asn1SccTM_T* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTM_T_Decode(asn1SccTM_T* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMySeq_validity_Encode(const asn1SccMySeq_validity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeq_validity_Decode(asn1SccMySeq_validity* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int32_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMyInteger_Encode(const asn1SccMyInteger* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMySeq_Encode(const asn1SccMySeq* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeq_Decode(asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMyChoice_Encode(const asn1SccMyChoice* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyChoice_Decode(asn1SccMyChoice* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Scchello	asn1Scchello
#define ENUM_asn1Sccworld	asn1Sccworld
#define ENUM_asn1Scchowareyou	asn1Scchowareyou
#define ENUM_asn1Sccvalid	asn1Sccvalid
#define ENUM_asn1Sccinvalid	asn1Sccinvalid
#define CHOICE_a_PRESENT	asn1SccMyChoice::a_PRESENT
#define CHOICE_b_PRESENT	asn1SccMyChoice::b_PRESENT

#endif

#endif
